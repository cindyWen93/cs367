import java.util.List;
import java.util.LinkedList;
import java.util.Iterator;

/**
 *
 * A map is a data structure that creates a key-value mapping. Keys are unique
 * in the map. That is, there cannot be more than one value associated with a
 * same key. However, two keys can map to a same value.
 *
 * The SimpleHashMap takes two generic parameters, K and V, standing for the
 * types of keys and values respectively.
 *
 */
public class SimpleHashMap<K extends Comparable<K>, V> implements
		SimpleMapADT<K, V> {

	private int[] tableSizes = { 11, 23, 47, 97, 197, 397, 797, 1597, 3203,
			6421, 12853, 25717, 51437, 102877, 205759, 411527, 823117, 1646237,
			3292489, 6584983, 13169977, 26339969, 52679969, 105359939,
			210719881, 421439783, 842879579, 1685759167 };

	private double lf = 0.75;

	private LinkedList<Entry<K,V>>[] table;
	private int tableSize;
	private int tableSizeIndex;

	public SimpleHashMap() {
		this.tableSizeIndex = 0;
		this.tableSize = tableSizes[tableSizeIndex];
		table = new LinkedList[tableSize];
	}

	private int hash(K k) {
    if(k.hashCode() >= 0){
    return k.hashCode() % this.tableSize;
    }
    else{
    	return k.hashCode() % this.tableSize + this.tableSize;
    }	
    }	
	
	private boolean isToofull(){
		double numLoaded = 0;
		for(int i = 0; i < tableSize; i++){
			if(table[i] != null){
				numLoaded++;
			}
		}
	if(numLoaded / tableSize >= this.lf){
		return true;
	}
	else{
		return false;
	}
		
	}
	 
	
	/**
	 * Returns the value to which the specified key is mapped, or null if this
	 * map contains no mapping for the key.
	 *
	 * @param key
	 *            the key whose associated value is to be returned
	 * @return the value to which the specified key is mapped, or null if this
	 *         map contains no mapping for the key
	 * @throws NullPointerException
	 *             if the specified key is null
	 */
	public V get(K key) throws NullPointerException {
		if(key == null){
			throw new NullPointerException();
		}
		int myHashIndex =  hash(key);
		if(table[myHashIndex] == null){
			return null;
		}
		else{
		LinkedList<Entry<K, V>> myList =  table[myHashIndex];
		Iterator<Entry<K, V>> myItr = myList.listIterator();
		while(myItr.hasNext()){
			Entry<K, V> temp = myItr.next();
			if(key.equals(temp.getKey())){
				return (V)temp.getValue();
			}
		}
		return null;
		}
		
		
	}

	/**
	 * Associates the specified value with the specified key in this map.
	 * Neither the key nor the value can be null. If the map previously
	 * contained a mapping for the key, the old value is replaced.
	 *
	 * @param key
	 *            key with which the specified value is to be associated
	 * @param value
	 *            value to be associated with the specified key
	 * @return the previous value associated with key, or null if there was no
	 *         mapping for key.
	 * @throws NullPointerException
	 *             if the key or value is null
	 */
	public V put(K key, V value) throws NullPointerException {
		if(key == null || value == null){
			throw new NullPointerException();
		}
		
		if(isToofull()){
			tableSizeIndex++;
			tableSize = tableSizes[tableSizeIndex];
			LinkedList<Entry<K, V>>[] expandedArray = new LinkedList[tableSize];
			for(int i = 0; i <  tableSizes[tableSizeIndex - 1]; i++){
				expandedArray[i] = this.table[i];
			}
			this.table = expandedArray;
			
			int myHashIndex =  hash(key);
			 
			if(table[myHashIndex] != null){
				Iterator<Entry<K, V>> myItr = table[myHashIndex].listIterator();
				while(myItr.hasNext()){
					Entry<K,V> temp = myItr.next();
				
					if(key.equals(temp.getKey())){
						return (V) temp.setValue(value);
					}
				}
				
				Entry<K,V> newEntry = new Entry<K, V>(key, value);
				table[myHashIndex].addFirst(newEntry);
				return null;
			}
			else{
				Entry<K,V> newEntry = new Entry<K, V>(key, value);
				LinkedList<Entry<K, V>> myList = new LinkedList<Entry<K,V>>();
				myList.addFirst(newEntry);
				table[myHashIndex] = myList;
				return null;		
			}
			
		}
		
		else{

		int myHashIndex =  hash(key);
		 
		if(table[myHashIndex] != null){
			Iterator<Entry<K, V>> myItr = table[myHashIndex].listIterator();
			while(myItr.hasNext()){
				Entry<K,V> temp = myItr.next();
			
				if(key.equals(temp.getKey())){
					return (V) temp.setValue(value);
				}
		     }
			
			Entry<K,V> newEntry = new Entry<K, V>(key, value);
			table[myHashIndex].addFirst(newEntry);
			return null;
			
			
		}
		else{
			Entry<K,V> newEntry = new Entry<K, V>(key, value);
			LinkedList<Entry<K, V>> myList = new LinkedList<Entry<K,V>>();
			myList.addFirst(newEntry);
			table[myHashIndex] = myList;
			return null;		
		}
		}

		
	}

	/**
	 * Removes the mapping for the specified key from this map if present. This
	 * method does nothing if the key is not in the map.
	 *
	 * @param key
	 *            key whose mapping is to be removed from the map
	 * @return the previous value associated with key, or null if there was no
	 *         mapping for key.
	 * @throws NullPointerException
	 *             if key is null
	 */

	public V remove(K key) throws NullPointerException {
		
		if(key ==  null){
			throw new NullPointerException();
		}
		int myHashIndex =  hash(key);
	
		if(table[myHashIndex] !=  null){
			Iterator<Entry<K, V>> myItr = table[myHashIndex].listIterator();
			while(myItr.hasNext()){
			   Entry<K, V> temp = myItr.next();
				if(key.equals(temp.getKey())){
				   V myValue = (V) temp.getValue();
				   table[myHashIndex].remove(temp);
			       return myValue;
				}
			}
			return null;
		}
		else{
			return null;
		}
			
	}

	/**
	 * Returns the greatest key less than or equal to the given key, or null if
	 * there is no such key. Throws NullPointerException if key is null.
	 * 
	 * @param key
	 *            key whose floor should be found
	 * @return the largest key smaller than the one passed to it
	 * @throws NullPointerException
	 *             if key is null
	 */
//	public K floorKey(K key) throws NullPointerException {
//		
//		if(key ==  null){
//			throw new NullPointerException();
//		}
//		int floorValue = -1;
//		K floorKey = null;
//		for(int i = 0; i < tableSize; i++){
//			if(table[i] != null){
//			LinkedList<Entry<K, V>> myList = table[i];
//			
//			Iterator<Entry<K, V>> myItr = myList.listIterator();
//			while(myItr.hasNext()){
//				   Entry<K, V> temp = myItr.next();
//				   if(key.compareTo((K) temp.getKey()) == 0){
//					   floorKey = temp.getKey();
//					   floorValue = 0;
//						   return floorKey;
//				   }
//				   else if(key.compareTo((K) temp.getKey()) > 0){
//					   
//					   if(key.compareTo((K) temp.getKey()) < floorValue || floorValue < 0){
//						   floorValue = key.compareTo((K) temp.getKey());
//						   floorKey = (K) temp.getKey();
//					   }
//				   }   
//			}
//		}
//		}
//	
//		return floorKey;
//		
//
//	}
	

	public K floorKey(K key){
	if(key == null){
	throw new NullPointerException();
	}
	Boolean found = false;
	K floorK = null ;
	for(int i = 0; i < tableSize; i++){
	if(table[i] != null){
	Iterator<Entry<K,V>> itr = table[i].iterator();
	while(itr.hasNext()){
	Entry<K,V> temp = itr.next();
	if(!found){
	if(temp.getKey().compareTo(key)<0){
	floorK = temp.getKey();
	found = true;
	}
	else if(temp.getKey().compareTo(key)==0){
	return key;
	}
	}
	else if(temp.getKey().compareTo(key)<0 && temp.getKey().compareTo(floorK) >0){
	floorK = temp.getKey();
	}
	else if(temp.getKey().compareTo(key)==0){
	return key;
	}
	}
	}
	}
	return floorK;
	}â€‹


}
	
	

	
}